#!/usr/bin/env ruby

require 'basis-band'
require 'optparse'
require 'yaml'

def samples_to_csv(samples)
  lines = []
  cols = samples.first.keys
  lines << cols.join(',')
  samples.each do |s|
    lines << cols.map{|c| s[c]}.join(",")
  end
  lines
end

options = {:type => 'metrics'}
options_file = File.expand_path('.basis-band', ENV['HOME'])
if File.exist?(options_file)
  o = YAML::load_file options_file
  if not o.nil?
    options.merge!(o)
  end
end

OptionParser.new do |opts|
  opts.banner = "basis-band gem v#{BasisBandMeta::VERSION}\nUsage: basis-band [options]"
  opts.on("-u", "--userid USERID", "User ID from mybasis.com") do |u|
    options[:userid] = u
  end
  opts.on("-d", "--date DATE", "Date to fetch from mybasis.com") do |d|
    options[:date] = d
  end
  opts.on("-c", "--[no-]csv", "Output CSV format") do |c|
    options[:csv] = c
  end
  opts.on("-C", "--cachedir DIR", "Directory to use to cache results") do |c|
    options[:cachedir] = c
  end
  opts.on("-s", "--summary", "Summarize all the data from the cache") do |s|
    options[:summary] = s
  end
  opts.on("-t", "--token TOKEN", "Token for v2 API access") do |t|
    options[:token] = t
  end
  opts.on("-T", "--type TYPE", "'metrics' or 'activities' (default 'metrics')") do |t|
    options[:type] = t
  end
end.parse!

b = BasisBand.new(options[:cachedir])

if options[:summary]
  all = b.metrics_for_all
  puts "date,air_temp,calories,gsr,heartrate,skin_temp,steps"
  all.each do |k,v|
    line = [k]
    t = ApiResponseModel.new(v).summary
    line << t['air_temp']['avg']
    line << t['calories']['avg']
    line << t['gsr']['avg']
    line << t['heartrate']['avg']
    line << t['skin_temp']['avg']
    line << t['steps']['avg']
    puts line.join(',')
  end
  exit
end

if options[:type] == 'metrics'
  raw = b.metrics_for_day(options[:userid], options[:date])
elsif options[:type] == 'activities'
  raw = b.activities_for_day(options[:token], options[:date])
else
  raw = $stdin.read
end

if options[:csv]
  m = ApiResponseModel.new(raw)
  lines = samples_to_csv(m.samples_by_minute)
  puts lines.join("\n")
else
  puts raw
end
