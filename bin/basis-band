#!/usr/bin/env ruby

require 'basis-band'
require 'optparse'

def samples_to_csv(samples)
  lines = []
  cols = samples.first.keys
  lines << cols.join(',')
  samples.each do |s|
    lines << cols.map{|c| s[c]}.join(",")
  end
  lines
end

options = {}

OptionParser.new do |opts|
  opts.banner = "basis-band gem v#{BasisBandMeta::VERSION}\nUsage: basis-band [options]"
  opts.on("-u", "--userid USERID", "User ID from mybasis.com") do |u|
    options[:userid] = u
  end
  opts.on("-d", "--date DATE", "Date to fetch from mybasis.com") do |d|
    options[:date] = d
  end
  opts.on("-c", "--[no-]csv", "Output CSV format") do |c|
    options[:csv] = c
  end
  opts.on("-C", "--cachedir DIR", "Directory to use to cache results") do |c|
    options[:cachedir] = c
  end
  opts.on("-l", "--login username:password", "Login and print user id") do |l|
    options[:login] = l
  end
end.parse!

if options[:login]
  (u,p) = options[:login].split(":", 2)
  a = ApiAuth.new
  puts a.login(u, p)
  exit
end

if options[:userid] and options[:date]
  b = BasisBand.new(options[:userid])
  if options[:cachedir]
    b.set_cache_dir(options[:cachedir])
  end
  raw = b.data_for_day(options[:date])
else
  raw = $stdin.read
end

if options[:csv]
  m = ApiResponseModel.new(raw)
  lines = samples_to_csv(m.samples_by_minute)
  puts lines.join("\n")
else
  puts raw
end
